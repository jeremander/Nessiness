<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Nessiness</title><link href="https://nessiness.com/" rel="alternate"></link><link href="https://nessiness.com/feed/all.atom.xml" rel="self"></link><id>https://nessiness.com/</id><updated>2024-10-20T00:00:00-04:00</updated><entry><title>New Python Library: fancy_dataclass</title><link href="https://nessiness.com/fancy_dataclass.html" rel="alternate"></link><published>2024-10-20T00:00:00-04:00</published><updated>2024-10-20T00:00:00-04:00</updated><author><name>Jeremy Silver</name></author><id>tag:nessiness.com,2024-10-20:/fancy_dataclass.html</id><summary type="html">&lt;p&gt;Introducing &lt;code&gt;fancy_dataclass&lt;/code&gt;, a versatile Python library built around dataclasses.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've written a Python library called &lt;code&gt;fancy_dataclass&lt;/code&gt;, a versatile Python library built around dataclasses. Python 3.7 introduced the &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;&lt;code&gt;dataclasses&lt;/code&gt;&lt;/a&gt; module, which lets you write "statically typed" classes using the type hinting mechanism.&lt;/p&gt;
&lt;p&gt;The goal of this library is to enable &lt;em&gt;type-driven development&lt;/em&gt;, which leverages the type system to eliminate a lot of boilerplate code. The idea is that you write a dataclass and then imbue with with "special powers." One common use case is to enable automatic conversion of Python objects to and from JSON. Another is to define a bundle of parameters and then expose them to a command-line argument parser. &lt;code&gt;fancy_dataclass&lt;/code&gt; makes it possible to do these things with very few lines of code.&lt;/p&gt;
&lt;p&gt;I am eager to have people try using it and provide feedback, so please check it out!&lt;/p&gt;
&lt;p&gt;To install the library, do: &lt;code&gt;pip install fancy_dataclass&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It should support Python versions 3.8–3.12.&lt;/p&gt;
&lt;p&gt;📝 Read the documentation &lt;a href="https://fancy-dataclass.readthedocs.io/en/latest/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;🪲 Submit bug reports or feature requests on &lt;a href="https://github.com/jeremander/fancy-dataclass"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="example-1-json-serialization"&gt;Example 1: JSON Serialization&lt;/h3&gt;
&lt;p&gt;Let's define a dataclass that can be converted to and from JSON.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fancy_dataclass&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONDataclass&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONDataclass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
    &lt;span class="n"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we can easily convert a &lt;code&gt;Person&lt;/code&gt; to a Python dictionary or a JSON string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# create a Person&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;71.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;hobbies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;juggling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cycling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# convert to Python dict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;71.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;hobbies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;juggling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cycling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="c1"&gt;# convert to JSON string&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_json_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;71.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;hobbies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;reading&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;juggling&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;cycling&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's easy to convert in the other direction, too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;: &amp;quot;John Doe&amp;quot;, &amp;quot;age&amp;quot;: 47, &amp;quot;height&amp;quot;: 71.5, &amp;quot;hobbies&amp;quot;: [&amp;quot;reading&amp;quot;, &amp;quot;juggling&amp;quot;, &amp;quot;cycling&amp;quot;]}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;
&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;71.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hobbies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reading&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;juggling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cycling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;fancy_dataclass&lt;/code&gt; supports serialization of &lt;a href="https://toml.io/en/"&gt;TOML&lt;/a&gt; as well as JSON, which is useful for configuration management.&lt;/p&gt;
&lt;h3 id="example-2-cli-argument-parsing"&gt;Example 2: CLI Argument Parsing&lt;/h3&gt;
&lt;p&gt;Let's use &lt;code&gt;fancy_dataclass&lt;/code&gt; to write a simple command-line program, &lt;code&gt;greet.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fancy_dataclass&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CLIDataclass&lt;/span&gt;

&lt;span class="nd"&gt;@dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLIDataclass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A program to greet the user.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name of person to greet&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num_exclamations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;args&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--num-exclamations&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;number of exclamation points&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fancy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;greet fancily&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# implement your main program logic&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fancy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Greetings and salutations&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;exclamations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_exclamations&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;exclamations&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a full-fledged command-line program with argument parsing, without having to write any of it manually. You can view the help menu with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python greet.py --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which prints out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;usage: greet.py [-h] [-n NUM_EXCLAMATIONS] [--fancy] name

A program to greet the user.

positional arguments:
  name                  name of person to greet

options:
  -h, --help            show this help message and exit
  -n NUM_EXCLAMATIONS, --num-exclamations NUM_EXCLAMATIONS
                        number of exclamation points
  --fancy               greet fancily
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;fancy_dataclass&lt;/code&gt; uses the dataclass field metadata to construct the appropriate argument names and help strings for this menu.&lt;/p&gt;
&lt;p&gt;Let's try running the program with a few different arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python greet.py Bob
Hello, Bob!

$ python greet.py Alice --fancy
Greetings and salutations, Alice!

$ python greet.py Alice --fancy -n 3
Greetings and salutations, Alice!!!

$ python greet.py
usage: greet.py [-h] [-n NUM_EXCLAMATIONS] [--fancy] name
greet.py: error: the following arguments are required: name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that dataclass fields with a default value are optional, while those without a default are required.&lt;/p&gt;
&lt;h3 id="other-features"&gt;Other Features&lt;/h3&gt;
&lt;p&gt;In addition to the examples above, &lt;code&gt;fancy_dataclass&lt;/code&gt; can do much more, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Configuration management&lt;/em&gt;: store global configurations and use them anywhere in your program.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SQL persistence&lt;/em&gt;: define SQL tables, and save/load objects from a database.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subprocess calls&lt;/em&gt;: generate command-line arguments to be passed to another program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You are free to combine the features together so that the same dataclass can be used for multiple purposes (e.g. both SQL and JSON representation).&lt;/p&gt;
&lt;p&gt;There is also a system for adjusting class-specific or field-specific settings (e.g. for JSON serialization, whether to suppress &lt;code&gt;None&lt;/code&gt; values or default values); see the documentation for details.&lt;/p&gt;
&lt;h3 id="what-about-pydantic"&gt;What about &lt;code&gt;pydantic&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;Some of the features in this library, like JSON serialization, are also available in the popular &lt;a href="https://docs.pydantic.dev/latest/"&gt;pydantic&lt;/a&gt; library. &lt;code&gt;pydantic&lt;/code&gt; also provides field &lt;em&gt;validation&lt;/em&gt;, which &lt;code&gt;fancy_dataclass&lt;/code&gt; does not (yet) do, and a host of other features. On the other hand, &lt;code&gt;fancy_dataclass&lt;/code&gt; has features that &lt;code&gt;pydantic&lt;/code&gt; does not have, like command-line parsing.&lt;/p&gt;
&lt;p&gt;While &lt;code&gt;fancy_dataclass&lt;/code&gt; does overlap with &lt;code&gt;pydantic&lt;/code&gt; in some ways, it was designed to be as lightweight as possible, both in terms of dependencies and configurations. Another main difference is that &lt;code&gt;pydantic&lt;/code&gt; classes must inherit from &lt;code&gt;BaseModel&lt;/code&gt; (or use a special &lt;code&gt;pydantic.dataclasses.dataclass&lt;/code&gt; decorator), while &lt;code&gt;fancy_dataclass&lt;/code&gt; uses the ordinary &lt;code&gt;dataclass&lt;/code&gt; decorator with additional "mixin" classes like &lt;code&gt;JSONDataclass&lt;/code&gt;, &lt;code&gt;CLIDataclass&lt;/code&gt;, etc. depending on what features you want to use.&lt;/p&gt;
&lt;p&gt;You can also use both &lt;code&gt;fancy_dataclass&lt;/code&gt; and &lt;code&gt;pydantic&lt;/code&gt; together to get the best of both worlds.&lt;/p&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Anyway, I hope you enjoy using this library, and I am always happy to respond to any bug reports and feature requests! Feel free to follow the project on &lt;a href="https://github.com/jeremander/fancy-dataclass"&gt;Github&lt;/a&gt; or e-mail me at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#101;&amp;#114;&amp;#101;&amp;#109;&amp;#121;&amp;#115;&amp;#64;&amp;#110;&amp;#101;&amp;#115;&amp;#115;&amp;#105;&amp;#110;&amp;#101;&amp;#115;&amp;#115;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#101;&amp;#114;&amp;#101;&amp;#109;&amp;#121;&amp;#115;&amp;#64;&amp;#110;&amp;#101;&amp;#115;&amp;#115;&amp;#105;&amp;#110;&amp;#101;&amp;#115;&amp;#115;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category></entry><entry><title>Adding Captions to Video with AI</title><link href="https://nessiness.com/captioning_with_ai.html" rel="alternate"></link><published>2023-03-01T00:00:00-05:00</published><updated>2023-03-01T00:00:00-05:00</updated><author><name>Jeremy Silver</name></author><id>tag:nessiness.com,2023-03-01:/captioning_with_ai.html</id><summary type="html">&lt;p&gt;Using OpenAI Whisper and &lt;code&gt;ffmpeg&lt;/code&gt; to add captions to your videos.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hi all! After a long hiatus, this is my first "real" blog post with actual content. 😆&lt;/p&gt;
&lt;p&gt;In this day and age, &lt;a href="https://www.w3.org/WAI/fundamentals/accessibility-intro/"&gt;web accessibility&lt;/a&gt; is all but essential, and captioning video is a key part of that. Platforms like YouTube will now caption uploaded videos by default in most circumstances, but sometimes you may be working with other platforms or creating your own videos, so you'll need to create the captions yourself.&lt;/p&gt;
&lt;p&gt;Last weekend my friend who's a music teacher asked me for help adding captions to a video, for the benefit of a hearing-impaired student. A quick Google search brought up many web-based services that use machine learning to generate captions from audio, but these tended to require registration and limit the features available without a monthly subscription (for example, video duration).&lt;/p&gt;
&lt;p&gt;Since I fancy myself a command-line warrior, and since it seemed onerous to upload/download a video just to edit it, I sought a more efficient solution. Searching Github led me to an elegant Python package called &lt;a href="https://github.com/m1guelpf/auto-subtitle"&gt;auto-subtitle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto-subtitle&lt;/code&gt; makes use of OpenAI's &lt;a href="https://openai.com/research/whisper"&gt;Whisper&lt;/a&gt; system for automatic speech recognition and translation (yes, that's the same OpenAI who brought us &lt;a href="https://chat.openai.com"&gt;ChatGPT&lt;/a&gt;). Below I'll go through the steps of how I used this tool to create video captions.&lt;/p&gt;
&lt;h3 id="step-0-install-auto-subtitle"&gt;Step 0: Install auto-subtitle&lt;/h3&gt;
&lt;p&gt;Follow the install instructions on the Github &lt;a href="https://github.com/m1guelpf/auto-subtitle"&gt;page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;NOTE&lt;/strong&gt;: I had trouble installing it using Python 3.11, which is apparently too new to support PyTorch; I got around this by reverting to Python 3.9 using &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id="step-1-generate-captions"&gt;Step 1: Generate captions&lt;/h3&gt;
&lt;p&gt;Let's say we have a video we want to caption. As a test example, I downloaded &lt;a href="https://www.youtube.com/watch?v=CGmfGaZecHA"&gt;this video&lt;/a&gt;, naming it &lt;code&gt;video.mp4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To caption it with Whisper AI, it took just a single command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;auto_subtitle video.mp4 -o caption --output_srt True --verbose True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I provided the name of the video and an output directory. I also added some flags, &lt;code&gt;--output_srt True&lt;/code&gt; to save the subtitle file (more on that later), and &lt;code&gt;--verbose True&lt;/code&gt; to have the program print info as it runs.&lt;/p&gt;
&lt;p&gt;Here is what it printed out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Extracting audio from video...
Generating subtitles for video... This might take a while.
Detecting language using up to the first 30 seconds. Use
`--language` to specify the language
Detected language: English
[00:00.000 --&amp;gt; 00:06.120]  Hello everyone. In this lesson about
the origins of the orchestra, we will be looking
[00:06.120 --&amp;gt; 00:11.440]  at the types of music that appeared
during the Baroque era.
[00:11.440 --&amp;gt; 00:18.080]  Music and many other art forms began
to flourish between 1600 and 1750, during a time we now
[00:18.080 --&amp;gt; 00:25.520]  call the Baroque era. In the early
1600s, theatre was big in England, where Shakespeare
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This took about a minute to run (the video was 3.5 minutes). Verbose mode was very helpful since it let me monitor the speed and accuracy of the transcription as it progressed. Two files were saved in the &lt;code&gt;caption&lt;/code&gt; folder, &lt;code&gt;video.mp4&lt;/code&gt; (captioned version) and &lt;code&gt;video.srt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can see from the sample above, the quality of the transcription is impeccable, as one might expect of OpenAI's recent cutting-edge language models. I was particularly impressed with how well it did on proper names, and it also seemed to be completely robust to ambient noise and music (this test video plays light orchestral music throughout).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto-subtitle&lt;/code&gt; is also capable of doing translation from other languages into English, but I have not yet tested this out in depth.&lt;/p&gt;
&lt;h3 id="step-2-fix-up-mistakes"&gt;Step 2: Fix up mistakes&lt;/h3&gt;
&lt;p&gt;Although the language model can transcribe speech almost perfectly, there may still be some minor errors to fix up. If you're in a hurry and don't care about perfection, you can take the auto-generated video and go about your day. But if you want to make some tweaks, there are a couple approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use a subtitle editing program (for example, &lt;a href="https://www.nikse.dk/subtitleedit"&gt;Subtitle Edit&lt;/a&gt;, which seems pretty good). This lets you edit subtitles while watching the video in real time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the &lt;code&gt;.srt&lt;/code&gt; subtitle file in a text editor, then combine it with the original video.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I went with option #2.&lt;/p&gt;
&lt;p&gt;The SRT file format is dead simple. It's just a text file containing caption text segments, along with their time ranges:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;1
0:00:00.000 --&amp;gt; 0:00:06.120
Hello everyone. In this lesson about the origins of the orchestra,
we will be looking

2
0:00:06.120 --&amp;gt; 0:00:11.440
at the types of music that appeared during the Baroque era.

3
0:00:11.440 --&amp;gt; 0:00:18.080
Music and many other art forms began to flourish between 1600 and
1750, during a time we now

...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As I said earlier, the transcription of this video was near-perfect. The &lt;em&gt;very minor&lt;/em&gt; issues I had were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Punctuation errors. In particular, some sentences were wanting commas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A couple of typos on the "rarer" musical terms. Namely, "bourrée" was spelled "beret," and "gigue" was "gig." But it had no problem with names like Monteverdi and Versailles. (Aside: this video had a lot of text displayed in the video itself; I think a cool feature of &lt;code&gt;auto-subtitle&lt;/code&gt; would be to "enhance" the language model by favoring words/spellings that appear in the video&amp;mdash;this would have detected "bourrée" and "gigue".)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This was more in other videos I tested, but sometimes the timings were off a little bit. This happened most when there were vacant stretches of noise or silence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I went ahead and fixed these small mistakes in my text editor. SRT also supports a handful of HTML-like markup tags. So for instance, I was able to italicize &lt;em&gt;basso continuo&lt;/em&gt; by tagging it like &lt;code&gt;&amp;lt;i&amp;gt;basso continuo&amp;lt;/i&amp;gt;&lt;/code&gt;. You can also change font color like &lt;code&gt;&amp;lt;font color="green"&amp;gt;...&amp;lt;/font&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="step-3-recombine-srt-with-video"&gt;Step 3: Recombine SRT with video&lt;/h3&gt;
&lt;p&gt;The last step is to combine the fixed-up SRT file with the original video. For this I used the venerable &lt;a href="http://ffmpeg.org"&gt;ffmpeg&lt;/a&gt; library, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg -i video.mp4 -vf subtitles=caption/video.srt caption/video.final.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(&lt;strong&gt;NOTE&lt;/strong&gt;: make sure to input the original video, &lt;em&gt;not&lt;/em&gt; the already-captioned one, since by default it will overlay the new captions on top of the old ones, which is not what you want.)&lt;/p&gt;
&lt;p&gt;If you don't like the default appearance of the captions, you can control various things like font size and position using the &lt;code&gt;force_style&lt;/code&gt; option.&lt;/p&gt;
&lt;h4 id="digression-on-efficiency"&gt;Digression: on efficiency&lt;/h4&gt;
&lt;p&gt;While I do love &lt;code&gt;ffmpeg&lt;/code&gt; (and so does &lt;a href="https://www.youtube.com/watch?v=9kaIXkImCAM"&gt;this guy&lt;/a&gt;), there is a downside to this approach compared to a proper subtitle editor, which is that you don't get instant feedback. Whenever you want to make a new change to the captions, you have to re-merge them with the video, which can take some time. In my case, I was just fixing up some typos, so this approach worked just fine.&lt;/p&gt;
&lt;p&gt;However, there's another way to do this using a "softsub" instead of a "hardsub." Certain formats like MKV support captions natively, and it's much less work for &lt;code&gt;ffmpeg&lt;/code&gt; to simply "embed" the captions into the file rather than "burning it into" the video itself. Here's an example of how to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg -i video.mp4 -i caption/video.srt -codec copy -map 0 -map 1 caption/video.softsub.mkv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note this will not work if you set the output extension to &lt;code&gt;.mp4&lt;/code&gt; because that format does not support softsubs.&lt;/p&gt;
&lt;p&gt;On my test video, the softsub command took 0.1 seconds to run, compared to 24 seconds for the hardsub&amp;mdash;over 200 times faster!&lt;/p&gt;
&lt;p&gt;You can open MKV files in most media players. I used VLC, but one pitfall I had was that the captions didn't show up immediately; I had to activate Track 1 in the Subtitle menu first.&lt;/p&gt;
&lt;p&gt;The method above does not seem to let you set formatting options for the captions, but there are other ways to do it. One such way is to convert the SRT into an ASS file (yes, you heard me... an &lt;a href="https://fileformats.fandom.com/wiki/SubStation_Alpha"&gt;ASS&lt;/a&gt; file).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ffmpeg&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;caption/video.srt&lt;span class="w"&gt; &lt;/span&gt;caption/video.ass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This file contains some header data that lets you control the styles. You can then merge the ASS 🍑 into your video using the same &lt;code&gt;ffmpeg&lt;/code&gt; command as before.&lt;/p&gt;
&lt;p&gt;That said, the ASS format and others like it seem much more complicated to work with than SRT; at that point you may be better off just using a graphical subtitle editor.&lt;/p&gt;
&lt;h3 id="conclusion"&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The captioned version of my test video, following the procedures above, can be found &lt;a href="https://www.youtube.com/watch?v=89Jy7EZQrzs"&gt;here&lt;/a&gt;. You can learn a thing or two about my favorite musical genre. 😉🎶&lt;/p&gt;
&lt;p&gt;Anyway, I found this whole exercise to be pretty eye-opening, and it shows how easy it is to put high-quality captions on your videos without breaking the bank. I hope this explainer has been useful to you!&lt;/p&gt;</content><category term="Machine Learning"></category><category term="AI"></category><category term="Machine Learning"></category><category term="Python"></category><category term="video"></category></entry><entry><title>Welcome</title><link href="https://nessiness.com/welcome.html" rel="alternate"></link><published>2021-02-06T00:00:00-05:00</published><updated>2021-02-06T00:00:00-05:00</updated><author><name>Jeremy Silver</name></author><id>tag:nessiness.com,2021-02-06:/welcome.html</id><summary type="html">&lt;p&gt;&lt;em&gt;The pale filtered light of Nessiness shines again on this paltry world.&lt;/em&gt; &amp;mdash;M.B.W.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;The pale filtered light of Nessiness shines again on this paltry world.&lt;/em&gt; &amp;mdash;M.B.W.&lt;/p&gt;
&lt;p&gt;Welcome to the new Nessiness! It's been a while.&lt;/p&gt;
&lt;p&gt;What do I mean, "a while"? Well, Nessiness first hit the Worldwide Web (as it was oft known) way back in 2002. So way back, in fact, that the &lt;a href="https://web.archive.org/web/2004*/nessiness.com"&gt;Wayback Machine&lt;/a&gt; only has a snapshot back to June 2004. And you can't even view it without Flash, which is in its death throes.&lt;/p&gt;
&lt;p&gt;To paint you a picture in words, imagine a black screen with a cartoon sword gliding around, to the background tune of "Jeeves and Wooster," and a bunch of clunky gray buttons leading you to click on links to "Games" and the like. That was the old Nessiness. The one brimming with youthful energy. The one we knew and loved.&lt;/p&gt;
&lt;p&gt;While we can never quite restore the magic that was the old Nessiness, we hope this new version will fill some of the void it left behind. Stay tuned for some blog posts on divers topics, and software projects that will knock your socks off!&lt;/p&gt;
&lt;p&gt;Although Nessiness is greatly indebted to its co-founder Matthew, the site will primarily feature the work of the "other" founder, Jeremy. Fortunately, Matthew's work can be viewed at the &lt;a href="http://timespaceinterchange.com"&gt;Time-Space Interchange&lt;/a&gt;, and he and Jeremy continue to collaborate on various nessiness, even after so many years.&lt;/p&gt;</content><category term="News"></category><category term="nessiness"></category></entry></feed>